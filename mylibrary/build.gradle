plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.wainow.mylibrary"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName "1.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

android.libraryVariants.all { variant ->
    def oldPackageName = "com.wainow.mylibrary" // Здесь укажите старое имя пакета
    def newPackageName = "io.bidmachine.media" // Здесь укажите новое имя пакета

    variant.outputs.each { output ->
        def processManifestTask = output.processManifestProvider.get()
        processManifestTask.doLast {
            File manifestFile = processManifestTask.manifestOutputFile.get().asFile
            String manifestContent = manifestFile.getText('UTF-8')
            manifestContent = manifestContent.replace(oldPackageName, newPackageName)
            manifestFile.write(manifestContent, 'UTF-8')
        }
    }

    def javaSrcDirs = variant.sourceSets.collect { it.java.srcDirs }.flatten()
    def resSrcDirs = variant.sourceSets.collect { it.res.srcDirs }.flatten()

    javaSrcDirs.each { dir ->
        def files = fileTree(dir).matching {
            include '**/*.java'
        }
        files.each { file ->
            String content = file.getText('UTF-8')
            content = content.replace(oldPackageName, newPackageName)
            file.write(content, 'UTF-8')
        }
    }

    resSrcDirs.each { dir ->
        def files = fileTree(dir).matching {
            include '**/*.xml'
        }
        files.each { file ->
            String content = file.getText('UTF-8')
            content = content.replace(oldPackageName, newPackageName)
            file.write(content, 'UTF-8')
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.6.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation "io.bidmachine:ads:1.4.1"
}

afterEvaluate {
    // To avoid publishing of the applications inside the project ..
    if (!plugins.hasPlugin("android")) {
        publishing {
            publications {
                mavenAar(MavenPublication) {
                    groupId = 'io.bidmachine.media'
                    artifactId = 'TP_LAB_1_LIB'
                    version = '1.1'
                    from components.release
                }
            }
        }
    }
}